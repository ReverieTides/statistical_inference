n_x
n_y
(1 / 11 / 10)
1 / n_x + 1 / n_y
nx <- n_x + 1
nx
1 / nx / 10
1 / nx / n_y
3 - 5 + c(-1,1) * qt(0.975, 18) * v * (1/ 10 + 1 / 10) ^ 0.5
v <- ((sqrt(100) * 0.5) + (100 * 2)) / 198
4 - 6 + c(-1,1) * qt(0.975, 18) * v * (1/ 10 + 1 / 10) ^ 0.5
6 - 4 + c(-1,1) * qt(0.975, 18) * v * (1/ 10 + 1 / 10) ^ 0.5
6 - 4 + c(-1,1) * qt(0.975, 18) * v * (1/ 100 + 1 / 100) ^ 0.5
library(swirl)
siwrl()
swirl()
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
pnorm(30+z, mean = 30, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE, sd = 1)
pnorm(30+z * 2, mean = 32, lower.tail = FALSE, sd = 2)
power.t.test(n = 16, delta = 2 / 4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 0.5, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd = 1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd = 1, type = "one.sample", alt = "one.sided")$delta
ty
set1 <- c(140,138,150,148,135)
set2 <- c(132,135,151,146,130)
t.test(set1, set2, paired = T)
mu <- 1100
std <- 30
n <- 9
mu + c(-1,1) * qt(0.975, 8)
mu + c(-1,1) * qt(0.975, 8) / std
mu + c(-1,1) * qt(0.975, 8) * std
pbinom(2,4,0.5)
pbinom(3,4,0.5)
pbinom(3,4,0.5, lower.tail = T)
pbinom(3,4,0.5, lower.tail = F)
pbinom(2,4,0.5, lower.tail = F)
1/100
ppois(0.01, q = 10/1787)
ppois(0.01, lambda =  = 10/1787)
ppois(0.01, lambda  = 10/1787)
ppois(0.01, lambda  = 10/1787, lower.tail = T)
ppois(0.01, lambda  = 10/1787, lower.tail = F)
ppois(10/1787, lambda = 0.01, lower.tail = F)
ppois(10/1787, lambda = 0.01)
ppois(q = 0.975, lambda  = 10/1787)
ppois(q = 0.975, lambda  = 10/1787, lower.tail = F)
n <- 1787
x <- 10
lambda <- 10/1787
ppois(1/100, lambda = lambda)
ppois(lambda, 1/100)
ppois(lambda, 1/100, lower.tail = T)
ppois(lambda, 1/100, lower.tail = F)
ppois(lambda, 1/100, lower.tail = F) * 100
lambda <- 1/100
ppois(10/1787, lambda = 0.01)
ppois(10/1787, lambda = 0.01, lower.tail = F)
ppois(10/1787, lambda = 0.01, lower.tail = T)
ppois(10, 1/100)
ppois(10, 1787 * 1/100)
ppois(10, 1787 * (1/100))
ppois(10, 1787 * (1/100), lower.tail = F)
ppois(10, 1787 * (1/100))
n <- 18
delta <- -3
g1_delta <- -3
g2_delta <- 1
g1_sd <- 1.5
g2_sd <- 1.8
(1.5 * 8) + (1.8 * 8) / 16
sqrt((1.5 * 8) + (1.8 * 8) / 16)
sqrt((1.5 * 8) + (1.8 * 8) / 18)
t.test(-3,1,sd = 3.5777, var.equal = T)
t.test(-2,sd = 3.5777, var.equal = T)
t.test((-3-1),sd = 3.5777, var.equal = T)
(1.5 ^ 2 * 8)
1.5^2
1.5^2*8
1.5^16
2.25*8
se <- sqrt((1.5 ^ 2 * 8) + (1.8 ^ 2 * 8) / 16 * (1/9 + 1/9))
se
/2 - se
-2 / se
pnorm(-2/se)
pnorm(-2/se) * 2
sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
se <- sqrt((1.5 ^ 2 * 8 + 1.8 ^ 2 * 8) / 16 * (1/9 + 1/9))
se
pnorm(-2/se) * 2
n <- 9
mu <- 1078
s <- 9/1078
s
1078/9
mu * c(-1,1) + qt(0.95, 8) + s
pnorm(q = 0.95, mean = 1077, sd = s)
pnorm(q = 0.95, mean = 1077, sd = s, lower.tail = T)
pnorm(q = 0.95, mean = 1077, sd = s, lower.tail = F)
pnorm(q = 1078, mean = 1077, sd = s)
n <- 100
power.t.test(n = 100, delta = -1, sd = 0.4)
power.t.test(n = 100, delta = -1, sd = 0.4, alternative = "one.sided")
power.t.test(n = 100, delta = -1, sd = 0.4, alternative = "one.side")
power.t.test(n = 100, delta = -1, sd = 0.4, alternative = "one.sided")
power.t.test(n = 100, delta = -1, sd = 0.4, alternative = "one.sided", sig.level = 0.5)
power.t.test(n = 100, delta = -1, sd = 0.4, alternative = "one.sided")
power.t.test(n = 100, delta = -0.1, sd = 0.4, alternative = "one.sided")
power.t.test(n = 100, delta = -1, sd = 0.04, alternative = "one.sided")
power.t.test(n = 100, delta = -0.01, sd = 0.04, alternative = "one.sided")
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "one.sided")
.01-0
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "one.sample")
power.t.test(sd = 0.04, sig.level = 0.05, power = 0.9)
power.t.test(sd = 0.04, delta = 0.01, power = 0.9)
power.t.test(sd = 0.04, delta = 0.01, power = 0.9, alternative = "one.sided")
power.t.test(sd = 0.04, delta = 0.01, power = 0.9, alternative = "one.sided", type = "one.sample")
1-.05/2
sqrt(9)
mu + c(-1,1) * qt(0.975, 8) * std/sqrt(9)
qt(1-.05/2, 9-1)
qt(0.975, 8)
std <- 30
mu + c(-1,1) * qt(0.975, 8) * std/sqrt(9)
1100 + c(-1,1) * 30/sqrt(9) * qt(1-.05/2, 9-1)
mu + c(-1,1) *  std/sqrt(9) * qt(0.975, 8)
mu + c(-1,1) *  std/sqrt(9) * qt(0.975, 8)
1100 + c(-1,1) * 30/sqrt(9) * qt(1-.05/2, 9-1)
mu <- 1100
mu + c(-1,1) *  std/sqrt(9) * qt(0.975, 8)
set1 <- c(140,138,150,148,135)
set2 <- c(132,135,151,146,130)
t.test(set1, set2, paired = T)
n <- 1787
x <- 10
lambda <- 1/100
ppois(10/1787, lambda = 1787 * lambda, lower.tail = T)
n <- 1787
x <- 10
lambda <- 1/100
ppois(10, lambda = 1787 * lambda, lower.tail = T)
pbinom(2,4,0.5, lower.tail = F)
sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
sqrt((1.5 ^ 2 * 8 + 1.8 ^ 2 * 8) / 16 * (1/9 + 1/9))
z <- (-3+1) / se
pnorm(z) * 2
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "one.sample")
power.t.test(sd = 0.04, delta = 0.01, power = 0.9, alternative = "one.sided", type = "one.sample")
set1 <- c(140,138,150,148,135)
set2 <- c(132,135,151,146,130)
t.test(set1, set2, paired = T)
mu <- 1100
std <- 30
n <- 9
mu + c(-1,1) *  std/sqrt(9) * qt(0.975, 8)
n_plac <- 9
n_treat <- 9
mudiff_treat <- -3
mudiff_plac <- 1
sddiff_plac <- 1.8
sddiff_treat <- 1.5
sqrt(((n_plac-1)*sddiff_plac^2 + (n_treat-1)*sddiff_treat^2)/(n_plac + n_treat -2))
(mudiff_treat-mudiff_plac)/(s*sqrt(1/n_plac + 1/n_treat))
sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
sqrt(((n_plac-1)*sddiff_plac^2 + (n_treat-1)*sddiff_treat^2)/(n_plac + n_treat -2))
sqrt((1.5 ^ 2 * 8) + (1.8 ^ 2 * 8) / 16 * (1/9 + 1/9))
sqrt((1.5 ^ 2 * 8 + 1.8 ^ 2 * 8) / 16 * (1/9 + 1/9))
sqrt((1.5 ^ 2 * 8 + 1.8 ^ 2 * 8) / 16
)
(-3-1)/sqrt((1.5 ^ 2 * 8 + 1.8 ^ 2 * 8) / 16) * sqrt(1/9 + 1/9)
2*pt(-1.138106, 16)
(mudiff_treat-mudiff_plac)/(s*sqrt(1/n_plac + 1/n_treat))
n <- 100
power.t.test(n = 100, delta = 0.01, sd = 0.04, alternative = "one.sided", type = "one.sample")
power.t.test(sd = 0.04, delta = 0.01, power = 0.9, alternative = "one.sided", type = "one.sample")
knitr::opts_chunk$set(echo = TRUE, warning = F)
# Set seed for reproducability
set.seed(1)
# number of simulations
n <- 1000
# lambda
lambda <- 0.2
# exponentials
e <- 40
# initiate results variable
results <- vector()
for(i in 1:n){
results[i] <- mean(rexp(e, lambda))
}
mean(results)
runif(4)
runif(999999)
# Set seed for reproducability
set.seed(123)
# number of simulations
n <- 1000
# lambda
lambda <- 0.2
# exponentials
e <- 40
# initiate results variable
results <- vector()
for(i in 1:n){
results[i] <- mean(rexp(e, lambda))
}
mean(results)
var(5)
var(results)
25/40
sd(results)
hist(results)
(1/lambda) ^ 2 / n -1)
(1/lambda) ^ 2 / n -1
(1/lambda) ^ 2 / (n -1)
sqrt((1/lambda) ^ 2 / n)
knitr::opts_chunk$set(echo = TRUE, warning = F)
# lambda
lambda <- 0.2
# exponentials
n <- 40
sqrt((1/lambda) ^ 2 / n)
(1/lambda) ^ 2 / (n -1)
0.60/0.625
rnorm(100)
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(1000))
hist(rnorm(1000))
hist(rnorm(10000))
hist(rnorm(10000))
hist(rnorm(10000))
hist(rnorm(10000))
hist(rnorm(10000))
hist(rnorm(100000))
hist(rnorm(100000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(10000000))
hist(rnorm(10000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
hist(rnorm(1000000))
ggplot(results, aes(x = restuls))+geom_density()
library(ggplot2)
ggplot(results, aes(x = restuls))+geom_density()
# Convert results to dataframe
results <- data.frame("Results" = results)
ggplot(results, aes(x = Restuls))+geom_density()
ggplot(results, aes(x = Results))+geom_density()
ggplot(results, aes(x = Results))+geom_density(lwd = 2, fill = "lightblue", alpha = 0.7)
ggplot(results, aes(x = Results))+geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7)
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution")
library(gridExtra)
results_density_plot <- ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution")
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution")
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(xintercept = mean(results$Results))
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(breaks = c("mean"), values = "red")
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "lightblue", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "label", breaks = c("mean"), values = "red")
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "results", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(names = "Legend", breaks = c("results"), values = "lightblue")
ggplot(results, aes(x = Results)) +
geom_density(lwd = 1.5, fill = "results", alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(breaks = c("results"), values = "lightblue")
ggplot(results, aes(x = Results, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(breaks = c("results"), values = "lightblue")
ggplot(results, aes(x = Results, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "ee", breaks = c("results"), values = "lightblue")
ggplot(results, aes(x = Results, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(results$Results), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "lightblue")
set.seed(123)
hist(rnorm(1000))
rexp(40)
rexp(40, 0.2)
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
hist(rexp(40, 0.2))
# Normal distibution
normal_dist <- data.frame("Normal" = rnorm(1000))
ggplot(normal_dist, aes(x = Normal, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(normal_dist$Normal), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "lightblue")
ggplot(normal_dist, aes(x = Normal, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(normal_dist$Normal), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "lightred")
ggplot(normal_dist, aes(x = Normal, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(normal_dist$Normal), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "tred")
ggplot(normal_dist, aes(x = Normal, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(normal_dist$Normal), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "red")
ggplot(normal_dist, aes(x = Normal, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(normal_dist$Normal), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "green")
ggplot(normal_dist, aes(x = Normal, fill = "results")) +
geom_density(lwd = 1.5, alpha = 0.7) +
ggtitle("Density Plot of Simulated Distribution") +
geom_vline(aes(xintercept = mean(normal_dist$Normal), colour = "mean"), lty = 2, lwd = 1) +
scale_colour_manual(name = "Sample Statistic", breaks = c("mean"), values = "red") +
scale_fill_manual(name = "Legend", breaks = c("results"), values = "darkgreen")
# Convert results to dataframe
results <- data.frame("Exponential Means" = results)
# Convert results to dataframe
results <- data.frame("Exponential Means" = results)
results$Results
# Convert results to dataframe
results <- data.frame(`Exponential Means` = results)
data.frame(`Exponential Means` = results)
results <- data.frame(`Exponential Means` = results)
View(results)
rm(results)
# perform 1000 mean iterations and collect results
for(i in 1:trials){
results[i] <- mean(rexp(n, lambda))
}
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(ggplot2)
library(gridExtra)
# Set seed for reproducability
set.seed(123)
# number of simulations
trials <- 1000
# lambda
lambda <- 0.2
# exponentials
n <- 40
theoretical_mean <- 1 / lambda
theoretical_standard_dev <- sqrt((1/lambda) ^ 2 / n)
theoretical_variance <- 0.625
# initiate results variable
results <- vector()
# perform 1000 mean iterations and collect results
for(i in 1:trials){
results[i] <- mean(rexp(n, lambda))
}
sample_mean <- mean(results)
sample_standard_dev <- sd(results)
sample_variance <- var(results)
# Convert results to dataframe
results <- data.frame(`Exponential Means` = results)
View(results)
# Convert Exponential mean distribution to normal values
norm_results <- (results$Exponential.Means - sample_mean) / sample_standard_dev
norm_results
hist(norm_results)
# Convert exponential means distribution to normal values
norm_results <- data.frame("Norm Results" = (results$Exponential.Means - sample_mean) / sample_standard_dev)
ggplot() +
geom_density(normal_dist, aes(x = Normal, fill = "normal"), lwd = 1.5, alpha = 0.7) +
geom_density(norm_results, aes(x = `Norm Results`, fill = "Normalised Results"), lwd = 1.5, alpha = 0.7)
scale_fill_manual(name = "Legend", breaks = c("normal", "Normalised Results"), values = c("darkgreen", "lightblue"))
str(norm_results)
str(normal_dist)
ggplot() +
geom_density(normal_dist, aes(x = Normal, fill = "normal"), lwd = 1.5, alpha = 0.7)
ggplot() +
geom_density(data =normal_dist, aes(x = Normal, fill = "normal"), lwd = 1.5, alpha = 0.7)
ggplot() +
geom_density(data = normal_dist, aes(x = Normal, fill = "normal"), lwd = 1.5, alpha = 0.7) +
geom_density(data = norm_results, aes(x = `Norm Results`, fill = "Normalised Results"), lwd = 1.5, alpha = 0.7)
scale_fill_manual(name = "Legend", breaks = c("normal", "Normalised Results"), values = c("darkgreen", "lightblue"))
ggplot() +
geom_density(data = normal_dist, aes(x = Normal, fill = "normal"), lwd = 1.5, alpha = 0.7) +
geom_density(data = norm_results, aes(x = `Norm.Results`, fill = "Normalised Results"), lwd = 1.5, alpha = 0.7)
scale_fill_manual(name = "Legend", breaks = c("normal", "Normalised Results"), values = c("darkgreen", "lightblue"))
ggplot() +
geom_density(data = normal_dist, aes(x = Normal, fill = "normal"), lwd = 1.5, alpha = 0.7) +
geom_density(data = norm_results, aes(x = `Norm.Results`, fill = "Normalised Results"), lwd = 1.5, alpha = 0.7) +
scale_fill_manual(name = "Legend", breaks = c("normal", "Normalised Results"), values = c("darkgreen", "lightblue"))
ggplot() +
geom_density(data = normal_dist, aes(x = Normal, fill = "Normal Distribution"), lwd = 1.5, alpha = 0.7) +
geom_density(data = norm_results, aes(x = `Norm.Results`, fill = "Normalised Exponential Means"), lwd = 1.5, alpha = 0.7) +
scale_fill_manual(name = "Legend", breaks = c("Normal Distribution", "Normalised Exponential Means"), values = c("darkgreen", "lightblue"))
hist(rexp(10000, 0.2))
hist(rexp(40000, 0.2))
hist(rexp(40000, 2))
hist(rexp(40000, 20))
hist(rexp(40000, -5))
hist(rexp(40000, 0))
hist(rexp(40000))
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "darkblue", alpha = 0.2, colour = "black")
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black")
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", binwidth = 50)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", binwidth = 500)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", binwidth = 39)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", bins = 50)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", bins = 500)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", bins = 20)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "blue", alpha = 0.3, colour = "black", bins = 30)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "lightblue", alpha = 0.7, colour = "black", binwidth = 50)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(fill = "lightblue", alpha = 0.7, colour = "black", bins = 30)
ggplot(data = results, aes(x = Exponential.Means)) +
geom_histogram(aes(fill = "Exponential Means"), alpha = 0.7, colour = "black", bins = 30) +
scale_fill_manual(name = "Legend", breaks = c("Exponential Means"), values = "lightblue")
iid_exponentials <- data.frame("Exponentials" = rexp(trials * n, lambda))
getwd()
setwd(choose.dir())
ToothGrowth
summary(ToothGrowth)
?data
?ToothGrowth
install.packages("tidyverse")
library(tidyverse)
str(ToothGrowth)
ggplot(data = ToothGrowth, aes(x = dose, y = len, colour = supp))+geom_line()
ToothGrowth2 <- ToothGrowth %>%
group_by(supp, dose) %>%
summarise(len = mean(len))
ggplot(data = ToothGrowth2, aes(x = dose, y = len, colour = supp))+geom_line()
ToothGrowth2 <- ToothGrowth %>%
group_by(supp, dose) %>%
summarise(growth = mean(len))
ToothGrowth2 ggplot(data = ToothGrowth2, aes(x = dose, y = len, colour = supp))+geom_line(lwd = 1.5, alpha = 0.7)
ggplot(data = ToothGrowth2, aes(x = dose, y = len, colour = supp))+geom_line(lwd = 1.5, alpha = 0.7)
ggplot(data = ToothGrowth2, aes(x = dose, y = growth, colour = supp))+geom_line(lwd = 1.5, alpha = 0.7)
ggplot(data = ToothGrowth2, aes(x = dose, y = growth, colour = supp)) +
geom_line(lwd = 1.5, alpha = 0.7) +
ggtitle(label = "Tooth growth in guinea pigs", subtitle = "Dose vs Suppliment")
View(ToothGrowth2)
ToothGrowth
table(ToothGrowth$supp)
knitr::opts_chunk$set(echo = TRUE)
OJ <- ToothGrowth[ToothGrowth$supp == "OJ", ]
VC <- ToothGrowth[ToothGrowth$supp == "VC", ]
